// Generated by CoffeeScript 1.8.0
(function() {
  var Consumer, debug, fs, readline, stream;

  fs = require('fs');

  debug = (require('debug'))('fq:Consumer');

  readline = require('readline');

  stream = require('stream');

  Consumer = (function() {
    var getFile, markFileAsProcessed, processClosedFiles, processOpenedFiles, validateParam;

    function Consumer(config) {
      this._file = null;
      this._filename = null;
      this._messagesConsumed = 0;
      this._consumeFn = null;
      this._rl = null;
      this._scanInterval = null;
      this.path = validateParam('path', config);
      this.name = validateParam('name', config);
    }

    validateParam = function(param, config) {
      if (!config[param]) {
        throw Error("Provide " + param + " in config object");
      } else {
        return config[param];
      }
    };

    Consumer.prototype.onMessage = function(cb) {
      return this._consumeFn = cb;
    };

    Consumer.prototype.start = function() {
      if (!this._consumeFn) {
        throw Error('Define onMessage function!');
      }
      return processClosedFiles(this, (function(_this) {
        return function() {
          return processOpenedFiles(_this);
        };
      })(this));
    };

    processClosedFiles = function(self, cb) {
      debug('Processing closed files');
      return getFile(self, 'ready', function(filename) {
        if (!filename) {
          debug('No closed files to process');
          return cb();
        }
        debug('Opening closed file', filename);
        self._filename = filename;
        self._file = fs.createReadStream(self.path + '/' + filename);
        self._rl = readline.createInterface({
          input: self._file,
          output: new stream
        });
        self._rl.on('line', (function(_this) {
          return function(data) {
            return self._consumeFn(data);
          };
        })(this));
        return self._rl.on('close', (function(_this) {
          return function() {
            return markFileAsProcessed(self, function() {
              return self.start();
            });
          };
        })(this));
      });
    };

    processOpenedFiles = function(self) {
      debug('Processing opened files');
      return getFile(self, 'opened', function(filename) {
        if (!filename) {
          return;
        }
        debug('Processing file', filename);
        return self._filename = filename;
      });
    };

    markFileAsProcessed = function(self, cb) {
      var path;
      path = self.path + '/' + self._filename;
      return fs.rename(path, path + '_processed', cb);
    };

    getFile = function(self, type, cb) {
      return fs.readdir(self.path, function(err, files) {
        var file, name, status, _i, _len;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          name = file.indexOf(self.name) === 0;
          status = file.indexOf('_fq_' + type) === (file.length - (type.length + 4));
          if (name && status) {
            cb(file);
            break;
          }
        }
        return cb(false);
      });
    };

    return Consumer;

  })();

  module.exports = Consumer;

}).call(this);
